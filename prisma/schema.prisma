generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id        String            @id @default(cuid())
  name      String
  isGS      Boolean           @default(false)
  locations EventToLocation[]
}

model Category {
  id    String @id @default(cuid())
  name  String
  icons Icon[]
}

model Icon {
  id          String    @id @default(cuid())
  name        String
  customName  String?
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])

  @@unique([name, customName, categoryId])
}

model EventToLocation {
  id         String   @id @default(cuid())
  eventId    String
  locationId String
  state      String   @default("{}")
  event      Event    @relation(fields: [eventId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@unique([eventId, locationId])
}

model Location {
  id       String            @id @default(cuid())
  name     String
  imageURL String            @default("https://placehold.co/600x400")
  events   EventToLocation[]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model AuthorizedUser {
  id    String @id @default(cuid())
  email String @unique
  role  Roles  @default(VIEWER)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Roles {
  VIEWER
  EDITOR
  ADMIN
}
